type: edu
files:
- name: build.gradle
  visible: true
  text: |-
    buildscript {
        apply plugin: 'hyperskill'

        repositories {
            mavenCentral()
        }

        dependencies {
            classpath "org.springframework.boot:spring-boot-gradle-plugin:$hs.spring.bootVersion"
            classpath "io.spring.gradle:dependency-management-plugin:$hs.spring.dependencyManagementVersion"
        }
    }

    apply plugin: 'java'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'

    repositories {
        mavenCentral()
    }

    sourceSets.main.resources.srcDirs = ["src/resources"]

    dependencies {
        implementation 'org.springframework.boot:spring-boot-starter'
        implementation 'org.springframework.boot:spring-boot-starter-actuator'
        implementation 'org.springframework.boot:spring-boot-starter-web'
        implementation 'org.springframework.security:spring-security-jwt:1.1.1.RELEASE'
    }
  learner_created: false
- name: src/dartsgame/DartsGameApplication.java
  visible: true
  text: |-
    package dartsgame;

    import org.springframework.boot.SpringApplication;
    import org.springframework.boot.autoconfigure.SpringBootApplication;

    @SpringBootApplication
    public class DartsGameApplication {
        public static void main(String[] args) {
            SpringApplication.run(DartsGameApplication.class, args);
        }
    }
  learner_created: false
- name: src/resources/application.properties
  visible: true
  text: |-
    server.port=28852
    management.endpoints.web.exposure.include=*
    management.endpoint.shutdown.enabled=true
    spring.jackson.serialization.INDENT_OUTPUT=true
  learner_created: false
- name: test/DartsGameTest.java
  visible: false
  text: |-
    import com.google.gson.JsonObject;
    import dartsgame.DartsGameApplication;
    import org.hyperskill.hstest.dynamic.DynamicTest;
    import org.hyperskill.hstest.dynamic.input.DynamicTesting;
    import org.hyperskill.hstest.mocks.web.response.HttpResponse;
    import org.hyperskill.hstest.stage.SpringTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.springframework.http.HttpStatus;
    import org.springframework.security.jwt.Jwt;
    import org.springframework.security.jwt.JwtHelper;
    import org.springframework.security.jwt.crypto.sign.RsaVerifier;

    import java.util.Map;

    import static org.hyperskill.hstest.common.JsonUtils.getJson;
    import static org.hyperskill.hstest.testing.expect.Expectation.expect;
    import static org.hyperskill.hstest.testing.expect.json.JsonChecker.isInteger;
    import static org.hyperskill.hstest.testing.expect.json.JsonChecker.isObject;

    class TestHint {
      private final String apiPath;
      private final String requestBody;
      private final String message;

      public TestHint(String apiPath, String requestBody, String message) {
        this.apiPath = apiPath;
        this.requestBody = requestBody;
        this.message = message;
      }

      @Override
      public String toString() {
        return "Test case\n" +
                "Testing api: '" + apiPath + '\'' + "\n" +
                (requestBody.length() > 0 ? "request: '" + requestBody + '\'' + "\n" : "") +
                "Expectations: '" + message + "'" + "\n" +
                "-----";
      }
    }

    public class DartsGameTest extends SpringTest {

      private final String tokenApi = "/oauth/token";

      private String bearerToken = "";
      private final String clientId = "hyperdarts";
      private final String clientSecret = "secret";

      private final String ivanHoe = """
          {
             "name": "Ivan",
             "lastname": "Hoe",
             "email": "ivanhoe@acme.com",
             "password": "oMoa3VvqnLxW"
          }""";

      private final String robinHood = """
          {
             "name": "Robin",
             "lastname": "Hood",
             "email": "robinhood@acme.com",
             "password": "ai0y9bMvyF6G"
          }""";

      private final String wrongUser = """
          {
             "name": "Bobin",
             "lastname": "Hood",
             "email": "bobinhood@acme.com",
             "password": "be0y9bMvyF6G"
          }""";

      private final String jwtSigningKey = """
          -----BEGIN PUBLIC KEY-----
          MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDQ+7yKlJGuvYtf1soMsJjkQJGA
          Xe90QAxqppycf+3JT5ehnvvWtwS8ef+UsqrNa5Rc9tyyHjP7ZXRN145SlRTZzc0d
          03Ez10OfAEVdhGACgRxS5s+GZVtdJuVcje3Luq3VIvZ8mV/P4eRcV3yVKDwQEenM
          uL6Mh6JLH48KxgbNRQIDAQAB
          -----END PUBLIC KEY-----""";

      public DartsGameTest() {
        super(DartsGameApplication.class, "../service_db.mv.db");
      }

      private CheckResult getToken(String user, int status, TestHint hint) {

        System.out.println(hint.toString());

        JsonObject userJson = getJson(user).getAsJsonObject();
        String password = userJson.get("password").getAsString();
        String login = userJson.get("email").getAsString().toLowerCase();

        Map<String, String> urlParams = Map.of("grant_type", "password", "username", login, "password", password);

        HttpResponse response = post("/oauth/token", urlParams)
                .basicAuth(clientId, clientSecret).send();


        if (response.getStatusCode() != status) {
          return CheckResult.wrong("POST " + tokenApi + " should respond with "
                  + "status code " + status + ", responded: " + response.getStatusCode() + "\n"
                  + response.getStatusCode() + "\n"
                  + "Response body:\n" + response.getContent() + "\n"
                  + "Request body:\n" + response.getContent());
        }
        String r = response.getContent();

        if (!r.endsWith("}")) {
          r = response.getContent() + "}";
        }
        JsonObject resp = getJson(r).getAsJsonObject();
        bearerToken = resp.get("access_token").getAsString();
        return CheckResult.correct();
      }

      private CheckResult checkToken(String user, TestHint hint) {

        System.out.println(hint.toString());

        JsonObject userJson = getJson(user).getAsJsonObject();
        String login = userJson.get("email").getAsString().toLowerCase();
        Jwt decodedToken;


        try {
          decodedToken = JwtHelper.decode(bearerToken);
        } catch (Exception e) {
          return CheckResult.wrong("Wrong token format!");
        }

        try {
          JwtHelper.decodeAndVerify(bearerToken, new RsaVerifier(jwtSigningKey));
        } catch (Exception e) {
          return CheckResult.wrong("Wrong token signature!");
        }

        expect(decodedToken.getClaims()).asJson().check(
                isObject()
                        .value("client_id", "hyperdarts")
                        .value("user_name", login)
                        .value("scope", new String[] {"read", "write", "update"})
                        .value("exp", isInteger())
                        .value("authorities", new String[] {"ROLE_GAMER"})
                        .anyOtherValues());

        return CheckResult.correct();
      }


      private CheckResult testTokenApi(String user, String clientId, String clientSecret, int status, TestHint hint) {

        System.out.println(hint.toString());

        JsonObject userJson = getJson(user).getAsJsonObject();
        String password = userJson.get("password").getAsString();
        String login = userJson.get("email").getAsString().toLowerCase();

        Map<String, String> urlParams = Map.of("grant_type", "password", "username", login, "password", password);

        HttpResponse response = post(tokenApi, urlParams)
                .basicAuth(clientId, clientSecret).send();


        if (response.getStatusCode() != status) {
          return CheckResult.wrong("POST " + tokenApi + " should respond with "
                  + "status code " + status + ", responded: " + response.getStatusCode() + "\n"
                  + response.getStatusCode() + "\n"
                  + "Response body:\n" + response.getContent() + "\n"
                  + "Request body:\n" + response.getContent());
        }
        return CheckResult.correct();
      }




      @DynamicTest
      DynamicTesting[] dt = new DynamicTesting[]{
              // Negative tests
              () -> testTokenApi(ivanHoe, clientId, "clientSecret", HttpStatus.UNAUTHORIZED.value(),
                      new TestHint(tokenApi, "",
                              "Testing token endpoint with wrong client credentials")),
              () -> testTokenApi(ivanHoe, "clientId", "clientSecret", HttpStatus.UNAUTHORIZED.value(),
                      new TestHint(tokenApi, "",
                              "Testing token endpoint with wrong client credentials")),
              () -> testTokenApi(wrongUser, clientId, clientSecret, HttpStatus.BAD_REQUEST.value(),
                      new TestHint(tokenApi, "",
                              "Testing token endpoint with correct client credentials, but wrong user")),

              // Positive tests
              () -> getToken(ivanHoe, HttpStatus.OK.value(), new TestHint(tokenApi, "",
                      "Testing token endpoint with correct credentials and correct user")),
              () -> checkToken(ivanHoe, new TestHint("", "",
                      "Check token")),
              () -> getToken(robinHood, HttpStatus.OK.value(), new TestHint(tokenApi, "",
                      "Testing token endpoint with correct credentials and correct user")),
              () -> checkToken(robinHood, new TestHint("", "",
                      "Check token"))
      };

    }
  learner_created: false
- name: src/dartsgame/dto/Turn.java
  visible: true
  text: |+
    package dartsgame.dto;

    public class Turn {
        private String first = "";
        private String second = "";
        private String third = "";
        private String playerName;

        public Turn() {
        }

        @Override
        public String toString() {
            return "Turn{" +
                    ", playerName='" + playerName + '\'' +
                    "first='" + first + '\'' +
                    ", second='" + second + '\'' +
                    ", third='" + third + '\'' +
                    '}';
        }

        public Turn(String first) {
            this.first = first;
        }

        public Turn(String first, String second) {
            this.first = first;
            this.second = second;
        }

        public Turn(String first, String second, String third) {
            this.first = first;
            this.second = second;
            this.third = third;
        }

        public String getFirst() {
            return first;
        }

        public Turn setFirst(String first) {
            this.first = first;
            return this;
        }

        public String getSecond() {
            return second;
        }

        public Turn setSecond(String second) {
            this.second = second;
            return this;
        }

        public String getThird() {
            return third;
        }

        public Turn setThird(String third) {
            this.third = third;
            return this;
        }

        public String getPlayerName() {
            return playerName;
        }

        public Turn setPlayerName(String playerName) {
            this.playerName = playerName;
            return this;
        }
    }

  learner_created: true
- name: src/dartsgame/controller/GameController.java
  visible: true
  text: |
    package dartsgame.controller;


    import org.springframework.http.HttpHeaders;
    import org.springframework.http.HttpStatus;
    import org.springframework.http.ResponseEntity;
    import org.springframework.web.bind.annotation.*;

    import java.util.Map;

    @RestController
    @RequestMapping("/api/game")
    public class GameController {

        private Map<String, String> correctAnswer = Map.of(
                "status", "Under construction!"
        );

        private Map<String, String> wrongAnswer = Map.of(
                "status", "Not under construction!"
        );

        @PostMapping("/create")
        public ResponseEntity<Object> createGame() {
            return new ResponseEntity<>(correctAnswer, HttpStatus.OK);
        }

        @GetMapping("/list")
        public ResponseEntity<Object> listGames() {
            return new ResponseEntity<>(correctAnswer, HttpStatus.OK);
        }

        @GetMapping("/join")
        public ResponseEntity<Object> joinGame() {
            return new ResponseEntity<>(correctAnswer, HttpStatus.OK);
        }

        @GetMapping("/status")
        public ResponseEntity<Object> gameStatus(@RequestHeader HttpHeaders headers) {
            return new ResponseEntity<>(correctAnswer, HttpStatus.OK);
        }

        @PostMapping("/throws")
        public ResponseEntity<Object> makeTurn() {
            return new ResponseEntity<>(correctAnswer, HttpStatus.OK);
        }

    }
  learner_created: true
- name: src/dartsgame/dto/GameDTO.java
  visible: true
  text: |
    package dartsgame.dto;

    import java.util.ArrayList;
    import java.util.List;

    public class GameDTO {
        private long gameId;
        private String playerOne = "Player One";
        private String playerTwo = "Player Two";
        private String gameStatus = "Created";
        private int playerOneScores = 501;
        private int playerTwoScores = 501;
        private String turn;
        private List<Turn> statistics = new ArrayList<>();

        public GameDTO() {
        }

        public long getGameId() {
            return gameId;
        }

        public GameDTO setGameId(long gameId) {
            this.gameId = gameId;
            return this;
        }

        public String getPlayerOne() {
            return playerOne;
        }

        public GameDTO setPlayerOne(String playerOne) {
            this.playerOne = playerOne;
            return this;
        }

        public String getPlayerTwo() {
            return playerTwo;
        }

        public GameDTO setPlayerTwo(String playerTwo) {
            this.playerTwo = playerTwo;
            return this;
        }

        public String getGameStatus() {
            return gameStatus;
        }

        public GameDTO setGameStatus(String gameStatus) {
            this.gameStatus = gameStatus;
            return this;
        }

        public int getPlayerOneScores() {
            return playerOneScores;
        }

        public GameDTO setPlayerOneScores(int playerOneScores) {
            this.playerOneScores = playerOneScores;
            return this;
        }

        public int getPlayerTwoScores() {
            return playerTwoScores;
        }

        public GameDTO setPlayerTwoScores(int playerTwoScores) {
            this.playerTwoScores = playerTwoScores;
            return this;
        }

        public String getTurn() {
            return turn;
        }

        public GameDTO setTurn(String turn) {
            this.turn = turn;
            return this;
        }

        public List<Turn> getStatistics() {
            return statistics;
        }

        public GameDTO setStatistics(List<Turn> statistics) {
            this.statistics = statistics;
            return this;
        }
    }
  learner_created: true
- name: src/dartsgame/cfg/SecurityConfiguration.java
  visible: true
  learner_created: true
- name: src/dartsgame/payloads/JoinResponse.java
  visible: true
  learner_created: true
- name: src/dartsgame/oauth/OAuthConfiguration.java
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/projects/228/stages/1142/implement#comment
status: Solved
feedback:
  message: Congratulations!
  time: Mon, 10 Jan 2022 16:22:25 UTC
record: 2
